"use client";
import { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { nextPlayer, selectCurrentPlayer, skipPlayerTurn, updatePlayerMoney, updatePlayerPosition } from "@/redux/features/playerSlice";
import { selectLandByIndex, setLandOwner } from "@/redux/features/landSlice";
import { RootState } from "@/redux/store";
import BuyLandModal from "../BuyLandModal/BuyLandModal";
import { LandCellData } from "@/types/landCell";

const PlayerWatcher = () => {
  const dispatch = useDispatch();
  const currentPlayer = useSelector(selectCurrentPlayer);
  const land = useSelector((state: RootState) =>
    selectLandByIndex(state, currentPlayer.position)
  );
  const [showModal, setShowModal] = useState(false);
  const [landToBuy, setLandToBuy] = useState<LandCellData | null>(null);

  useEffect(() => {
    const logPlayerMove = async () => {
      if (land) {
        console.log(`Player ${currentPlayer.id} hi·ªán t·∫°i ·ªü √¥ ƒë·∫•t: ${land.name} (index: ${land.index})`);

        // X·ª≠ l√Ω c√°c lo·∫°i √¥ ƒë·∫∑c bi·ªát
        switch (land.type) {
          case "tax":
            console.log(`üë£ Player ${currentPlayer.id} ƒëi qua √¥ thu·∫ø. Tr·ª´ $200.`);
            dispatch(updatePlayerMoney({ playerId: currentPlayer.id, amount: -200 }));
            break;

          case "chance":
            console.log(`üë£ Player ${currentPlayer.id} ƒëi qua √¥ c∆° h·ªôi. C·ªông $30.`);
            dispatch(updatePlayerMoney({ playerId: currentPlayer.id, amount: 30 }));
            break;

          case "goToJail":
            console.log(`üë£ Player ${currentPlayer.id} ƒëi v√†o √¥ "V√†o T√π". Chuy·ªÉn ƒë·∫øn √¥ "Nh√† T√π" v√† m·∫•t 1 l∆∞·ª£t.`);
            dispatch(updatePlayerPosition({ playerId: currentPlayer.id, position: 11 }));
            dispatch(skipPlayerTurn({ playerId: currentPlayer.id, turns: 1 }));
            break;

          default:
            break;
        }

        // Ki·ªÉm tra n·∫øu √¥ ƒë·∫•t c√≥ th·ªÉ mua ƒë∆∞·ª£c (type: "normal" | "station" | "utility")
        // if (["normal", "station", "utility"].includes(land.type)) {
        //   // Ki·ªÉm tra n·∫øu √¥ ƒë·∫•t ch∆∞a c√≥ ch·ªß s·ªü h·ªØu
        //   if (land.owner === undefined) {
        //     console.log(`üë£ Player ${currentPlayer.id} v·ª´a ƒë·∫øn √¥ ƒë·∫•t tr·ªëng: "${land.name}" (index: ${land.index})`);

        //     // Ki·ªÉm tra n·∫øu ng∆∞·ªùi ch∆°i ƒë·ªß ti·ªÅn ƒë·ªÉ mua ƒë·∫•t
        //     if (currentPlayer.money >= land.price) {
        //       setLandToBuy(land); // L∆∞u l·∫°i th√¥ng tin √¥ ƒë·∫•t
        //       setShowModal(true); // Hi·ªÉn th·ªã modal mua ƒë·∫•t
        //     } else {
        //       console.log("Kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ mua ƒë·∫•t.");
        //     }
        //   } else {
        //     console.log(`üë£ Player ${currentPlayer.id} ƒë·∫øn √¥ ƒë·∫•t: "${land.name}" (index: ${land.index}) v√† ƒë√£ c√≥ ch·ªß.`);
        //   }
        // } else {
        //   console.log(`üë£ Player ${currentPlayer.id} ƒë·∫øn √¥ kh√¥ng th·ªÉ mua: "${land.name}" (type: ${land.type}).`);
        // }
        if (["normal", "station", "utility"].includes(land.type)) {
          // Ki·ªÉm tra n·∫øu √¥ ƒë·∫•t ƒë√£ c√≥ ch·ªß s·ªü h·ªØu
          if (land.owner !== undefined && land.owner !== currentPlayer.id) {
            const levelKey = `level${land.houses || 0}` as keyof typeof land.fees; // Chuy·ªÉn key th√†nh ki·ªÉu h·ª£p l·ªá
            const rent = land.fees?.[levelKey] || 0; // T√≠nh ti·ªÅn thu√™ d·ª±a tr√™n c·∫•p ƒë·ªô
            console.log(
              `üë£ Player ${currentPlayer.id} ƒëi v√†o √¥ ƒë·∫•t c·ªßa Player ${land.owner}. Tr·∫£ ti·ªÅn thu√™: $${rent}.`
            );
        
            // Tr·ª´ ti·ªÅn ng∆∞·ªùi ch∆°i hi·ªán t·∫°i
            dispatch(updatePlayerMoney({ playerId: currentPlayer.id, amount: -rent }));
        
            // C·ªông ti·ªÅn cho ch·ªß s·ªü h·ªØu
            dispatch(updatePlayerMoney({ playerId: land.owner, amount: rent }));
          } else if (land.owner === undefined) {
            console.log(
              `üë£ Player ${currentPlayer.id} v·ª´a ƒë·∫øn √¥ ƒë·∫•t tr·ªëng: "${land.name}" (index: ${land.index})`
            );
        
            // Ki·ªÉm tra n·∫øu ng∆∞·ªùi ch∆°i ƒë·ªß ti·ªÅn ƒë·ªÉ mua ƒë·∫•t
            if (currentPlayer.money >= land.price) {
              setLandToBuy(land); // L∆∞u l·∫°i th√¥ng tin √¥ ƒë·∫•t
              setShowModal(true); // Hi·ªÉn th·ªã modal mua ƒë·∫•t
            } else {
              console.log("Kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ mua ƒë·∫•t.");
            }
          } else {
            console.log(
              `üë£ Player ${currentPlayer.id} ƒë·∫øn √¥ ƒë·∫•t c·ªßa ch√≠nh m√¨nh: "${land.name}".`
            );
          }
        }
      }
    };

    if (land) {
      logPlayerMove(); // Log sau khi player di chuy·ªÉn
    }
  }, [currentPlayer.position, land]);

  // X·ª≠ l√Ω khi ng∆∞·ªùi ch∆°i ƒë·ªìng √Ω mua ƒë·∫•t
  const handleBuyLand = () => {
    if (landToBuy) {
      // Tr·ª´ ti·ªÅn ng∆∞·ªùi ch∆°i
      dispatch(updatePlayerMoney({ playerId: currentPlayer.id, amount: -landToBuy.price }));

      // C·∫≠p nh·∫≠t ch·ªß s·ªü h·ªØu cho √¥ ƒë·∫•t
      dispatch(setLandOwner({ index: landToBuy.index, ownerId: currentPlayer.id }));

      // ƒê√≥ng modal
      setShowModal(false);
      setLandToBuy(null);
    }
  };

  // X·ª≠ l√Ω khi ng∆∞·ªùi ch∆°i t·ª´ ch·ªëi mua ƒë·∫•t
  const handleCloseModal = () => {
    setShowModal(false);
    setLandToBuy(null);
  };

  return (
    <>
      {/* Hi·ªÉn th·ªã Modal n·∫øu c√≥ */}
      <BuyLandModal
        isOpen={showModal}
        landName={landToBuy?.name || ""}
        price={landToBuy?.price || 0}
        onConfirm={handleBuyLand}
        onCancel={handleCloseModal}
      />
    </>
  );
};

export default PlayerWatcher;